import numpy as np

# Test
# 1. column 1, 3에 해당하는 행렬을 input data로 받는알고리즘으로 수정
# 2. 어떤 위치(어떤 epochs, 어떤 index)에서 에러가 발생하는지?
# 3. 각 오류상황에서 가중치의 수정방향이 어느 방향인지? 

class Perceptron(object):
    # 4-1. 세팅 // eta : 학습수치, n_iter : for문으로 돌리는 횟수, random_state : 랜덤 시드 값
    def __init__(self, eta=0.01, n_iter=50, random_state=1):
        self.eta = eta
        self.n_iter = n_iter
        self.random_state = random_state

    def fit(self, X, y):
        # 4-2. 랜덤 값
        rgen = np.random.RandomState(self.random_state)
        # 4-3. 0.0 정도로, 0.01 표준편차(작을수록 중심값이 많음)로, X의 열+1만큼 가중치 랜덤 생성 
        # normal (평균값, 표준편차, 사이즈)
        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=(1 + X.shape[1]))   
        
        self.errors_ = []
        # 4-4. init에 설정한 횟수만큼 돌리기
        for _num in range(self.n_iter):
            errors = 0
            count = 0
            # zip(A,B) : A행, B행별로 for문 돌리겠다는 뜻
            # 4-5. 가중치 최신화
            for xi, target in zip(X, y):
                # 가산 증감수치 = 학습수치 * (결과값 - 예상값)
                update = self.eta * (target - self.predict(xi))              
                
                # 가산치 += 가산 증감수치
                self.w_[1:] += update * xi
                self.w_[0] += update
                # 결과값 != 예상값 이면, 에러에 추가
                errors += int(update != 0.0)
                if update != 0.0:
                    print("시도 : {}, index : {}, 수정치 : {}, 값 : {}".format(str(_num+1).zfill(2), str(count).zfill(2), update, self.w_[1:]))
                count += 1
            self.errors_.append(errors)
        return self

    def net_input(self, X):
        # 4-7. 예상값을 2번째부터 X(조건)과 곱해서 추출
        return np.dot(X, self.w_[1:]) + self.w_[0]

    def predict(self, X):
        # 4-6. 예상값이 기준보다 크면 1
        return np.where(self.net_input(X) >= 0.0, 1, -1)


import pandas as pd

df = pd.read_csv('https://archive.ics.uci.edu/ml/'
        'machine-learning-databases/iris/iris.data', header=None)
df.tail()

#%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

# setosa와 versicolor를 선택합니다
# 1. 꽃 종류에 대한 값으로 결과치 추출
y = df.iloc[0:100, 4].values
y = np.where(y == 'Iris-setosa', -1, 1)

# 꽃받침 길이와 꽃잎 길이를 추출합니다
# 2. 조건 2개 100*2 행렬로 추출
X = df.iloc[0:100, [1, 3]].values

# 산점도를 그립니다
# 3. 그래프 그리기
plt.scatter(X[:50, 0], X[:50, 1],
            color='red', marker='o', label='setosa')
plt.scatter(X[50:100, 0], X[50:100, 1],
            color='blue', marker='x', label='versicolor')

plt.xlabel('sepal length [cm]')
plt.ylabel('petal length [cm]')
plt.legend(loc='upper left')

plt.show()

# 4. 예측해보기
ppn = Perceptron(eta=0.001, n_iter=100)

ppn.fit(X, y)

# 5. x : 에러의 크기 y : 에러크기의 그래프로 표시
plt.plot(range(1, len(ppn.errors_) + 1), ppn.errors_, marker='o')
plt.xlabel('Epochs')
plt.ylabel('Number of errors')
