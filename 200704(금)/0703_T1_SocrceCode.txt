import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.model_selection import train_test_split

#%matplotlib inline

import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning)

bike_df = pd.read_csv('C:/Users/재후니_패밀리_PC/Desktop/bike-sharing-demand/train.csv')
print(bike_df.shape)

# Null값 확인
bike_df.info()

# 2. 데이터 이상 분포 확인
temp = bike_df.describe()

# 3. datatime(string) year, month , day, hour 4개의 column을 추가하여서 분리하여 int값으로 각각 저장
# from sklearn.preprocessing import LabelEncoder
# encoder = LabelEncoder()
# encoder.fit(bike_df['datetime'])
# labels = encoder.transform(bike_df['datetime'])
# print('인코딩 변환값:',labels)
bike_df['year'] = bike_df['datetime'].apply(lambda x: x.split('-')[0])
bike_df['month'] = bike_df['datetime'].apply(lambda x: x.split('-')[1])        
bike_df['day'] = bike_df['datetime'].apply(lambda x: x.split('-')[2].split(' ')[0])     
bike_df['hour'] = bike_df['datetime'].apply(lambda x: x.split('-')[2].split(' ')[1].split(':')[0])           

# 4. 'datatime', 'casual', 'registerd' 삭제 
bike_df.drop('datetime', axis=1, inplace=True)
bike_df.drop('casual', axis=1, inplace=True)
bike_df.drop('registered', axis=1, inplace=True)

# 5. 'count' column target 데이터로 분리
bike_df['column'] = bike_df['count']
bike_df.drop('count', axis=1, inplace=True)

# 6. feature data 와 target data 분리. 비율:0.3
X_features = bike_df.iloc[:,0:-1]
y_target = bike_df.iloc[:,-1]
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X_features, y_target, test_size=0.3, random_state=0) # stratify=y_target

# 7. LinearRegression 통해서 학습 및 예측
from sklearn.linear_model import LinearRegression
linear_regression = LinearRegression()
linear_regression.fit(X_train, Y_train) 
y_pred = linear_regression.predict(X_test)

# 8. mean_squared_error , mean_absolute_error 패키지를 
# 이용하여서 MSE 와 MAE를 구한다
# 사용예시 : mean_absolute_error(y_test ,y_pred)
from sklearn.metrics import mean_squared_error
print(mean_absolute_error(Y_test ,y_pred))
print(mean_squared_error(Y_test ,y_pred))

from sklearn.metrics import r2_score
print(r2_score(Y_test ,y_pred))
